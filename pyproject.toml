[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tool-slide-bridge"
version = "0.1.0"
description = "Generate PowerPoint compatible slides from AI without friction"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "teacherbot", email = "noreply@github.com"}
]
maintainers = [
    {name = "teacherbot", email = "noreply@github.com"}
]
keywords = [
    "powerpoint",
    "presentations",
    "ai",
    "claude",
    "marp",
    "automation",
    "slides"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Office Suites",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: Markdown"
]
requires-python = ">=3.9"
dependencies = [
    "python-pptx>=0.6.21",
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "pathlib-mate>=1.0.0",
    "markdown>=3.4.0",
    "beautifulsoup4>=4.11.0",
    "Pillow>=9.0.0",
    "requests>=2.28.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "tox>=4.0.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.8.0",
    "factory-boy>=3.2.0",
    "coverage[toml]>=6.5.0"
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
    "sphinx-click>=4.3.0"
]
web = [
    "fastapi>=0.95.0",
    "uvicorn[standard]>=0.20.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6"
]

[project.urls]
Homepage = "https://github.com/norrisaftcc/tool-slide-bridge"
Repository = "https://github.com/norrisaftcc/tool-slide-bridge"
Documentation = "https://github.com/norrisaftcc/tool-slide-bridge#readme"
"Bug Tracker" = "https://github.com/norrisaftcc/tool-slide-bridge/issues"
Changelog = "https://github.com/norrisaftcc/tool-slide-bridge/blob/main/CHANGELOG.md"

[project.scripts]
tool-slide-bridge = "tool_slide_bridge.cli:main"
claude-to-pptx = "tool_slide_bridge.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pptx.*",
    "PIL.*",
    "bs4.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=tool_slide_bridge",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "marp: marks tests that require MARP CLI",
    "web: marks tests for web interface"
]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
per-file-ignores = [
    "__init__.py:F401"
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39,py310,py311,py312,py313,flake8,mypy,black,isort
isolated_build = True

[testenv]
deps = 
    pytest
    pytest-cov
    pytest-xdist
commands = pytest {posargs}

[testenv:flake8]
deps = flake8
commands = flake8 src tests

[testenv:mypy]
deps = mypy
commands = mypy src

[testenv:black]
deps = black
commands = black --check src tests

[testenv:isort]
deps = isort
commands = isort --check-only src tests
"""