name: Continuous Integration

# Triggers: Run on pushes to main/develop branches and all pull requests
# Purpose: Ensure code quality, run tests, and verify security before merging
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Global environment variables shared across all jobs
env:
  PYTHON_VERSION: "3.11"  # Primary Python version for development
  NODE_VERSION: "18"      # LTS Node.js version for MARP CLI

jobs:
  # ============================================================================
  # CODE QUALITY CHECKS
  # ============================================================================
  # Purpose: Verify code follows our style guidelines and catches common errors
  # Tools: Black (formatter), isort (import sorter), flake8 (linter), mypy (types)
  # Failure help: See CI_GUIDE.md and TEST_FAILURE_GUIDE.md
  lint-and-format:
    name: "📋 Code Quality (Lint & Format)"
    runs-on: ubuntu-latest
    steps:
      # Get the code from the repository
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        
      # Set up Python environment for our linting tools
      - name: "🐍 Set up Python ${{ env.PYTHON_VERSION }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      # Set up Node.js (needed for some development tools)
      - name: "📦 Set up Node.js ${{ env.NODE_VERSION }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      # Cache Python packages to speed up builds
      # Cache key includes requirements file hash - invalidates when deps change
      - name: "💾 Cache Python dependencies"
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: ${{ runner.os }}-pip-
          
      # Install our development dependencies (includes linting tools)
      - name: "📦 Install Python dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      # Install Node.js dependencies (for any JS-based tools)
      - name: "📦 Install Node.js dependencies"
        run: npm install
        
      # LINTING: Check for Python code style violations
      # Common failures: line too long, unused imports, spacing issues
      # Fix locally: flake8 src tests
      - name: "🔍 Lint Python code (flake8)"
        run: flake8 src tests --max-line-length=88 --extend-ignore=E203,W503
        
      # FORMATTING: Ensure consistent Python code formatting
      # Common failures: inconsistent quotes, spacing, line breaks
      # Fix locally: black src tests
      - name: "🎨 Check Python formatting (black)"
        run: black --check src tests
        
      # IMPORT SORTING: Ensure imports are organized consistently
      # Common failures: imports in wrong order or incorrectly grouped
      # Fix locally: isort src tests
      - name: "📚 Check Python import sorting (isort)"
        run: isort --check-only src tests
        
      # TYPE CHECKING: Verify Python type annotations are correct
      # Common failures: missing return types, type mismatches
      # Fix locally: mypy src --ignore-missing-imports
      - name: "🔬 Type checking (mypy)"
        run: mypy src --ignore-missing-imports

  # ============================================================================
  # PYTHON TESTS - MULTI-VERSION COMPATIBILITY
  # ============================================================================
  # Purpose: Ensure our code works across different Python versions and operating systems
  # Matrix: Tests Python 3.9-3.13 on Ubuntu, Windows, and macOS
  # Coverage: Measures how much of our code is tested (target: 80%+)
  # Failure help: See TEST_FAILURE_GUIDE.md for debugging test failures
  python-tests:
    name: "🧪 Python Tests (Python ${{ matrix.python-version }} on ${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      # Don't cancel other matrix jobs if one fails (helps identify OS-specific issues)
      fail-fast: false
      matrix:
        # Test on three major operating systems
        os: [ubuntu-latest, windows-latest, macos-latest]
        # Test on all supported Python versions (see pyproject.toml)
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        exclude:
          # Optimize CI time by skipping older Python on non-Linux
          # (Most compatibility issues show up on Ubuntu first)
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"
    steps:
      # Get the code from the repository
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        
      # Set up the specific Python version for this matrix job
      - name: "🐍 Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      # Cache dependencies for faster builds
      # Each OS + Python version gets its own cache
      - name: "💾 Cache Python dependencies"
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
            
      # Install our package and its dependencies
      - name: "📦 Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      # Ensure our package structure exists (sometimes needed in CI)
      - name: "📁 Create src directory structure"
        run: |
          mkdir -p src/tool_slide_bridge
          touch src/tool_slide_bridge/__init__.py
        shell: bash
        
      # RUN THE ACTUAL TESTS
      # -v: verbose output to see which tests are running
      # --cov: measure code coverage
      # --cov-report=xml: generate coverage report for external tools
      # --cov-report=term-missing: show missing lines in terminal
      - name: "🧪 Run unit tests with coverage"
        run: pytest tests/ -v --cov=tool_slide_bridge --cov-report=xml --cov-report=term-missing
        
      # Upload coverage data to codecov.io (only once per build to avoid duplicates)
      # Only run on our primary Python version and OS to avoid spam
      - name: "📊 Upload coverage to Codecov"
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # MARP CLI Tests
  marp-tests:
    name: MARP CLI Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package.json') }}
          restore-keys: ${{ runner.os }}-node-
          
      - name: Install MARP CLI
        run: npm install -g @marp-team/marp-cli
        
      - name: Test MARP installation
        run: marp --version
        
      - name: Create test directories
        run: |
          mkdir -p themes presentations tests/fixtures
          
      - name: Create basic MARP theme
        run: |
          cat > themes/test.css << 'EOF'
          /* Test theme */
          @import 'default';
          section { background: #fff; }
          EOF
          
      - name: Create test markdown
        run: |
          cat > tests/fixtures/test.md << 'EOF'
          ---
          marp: true
          theme: default
          ---
          # Test Slide
          This is a test presentation.
          EOF
          
      - name: Test MARP conversion to HTML
        run: marp tests/fixtures/test.md --html -o presentations/test.html
        
      - name: Verify HTML output
        run: test -f presentations/test.html

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, python-tests, marp-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          npm install -g @marp-team/marp-cli
          
      - name: Create basic project structure
        run: |
          mkdir -p src/tool_slide_bridge tests themes presentations
          touch src/tool_slide_bridge/__init__.py
          
      - name: Run integration tests
        run: |
          # This will be expanded as we implement the actual functionality
          echo "Integration tests will be implemented as features are added"

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run CodeQL Analysis
        uses: github/codeql-action@v2
        with:
          languages: python, javascript
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies for security scan
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep
          
      - name: Check for known security vulnerabilities (Safety)
        run: safety check --file requirements.txt
        
      - name: Static security analysis (Bandit)
        run: bandit -r src/ -f json -o bandit-report.json || true
        
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json