name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Pre-release validation
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a pre-release (contains alpha, beta, rc, or dev)
          if [[ $VERSION =~ (alpha|beta|rc|dev) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha1"
            exit 1
          fi

  # Build and test
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    needs: validate
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.11", "3.13"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install build wheel
          npm install -g @marp-team/marp-cli
          
      - name: Create project structure
        run: |
          mkdir -p src/tool_slide_bridge
          touch src/tool_slide_bridge/__init__.py
        shell: bash
        
      - name: Run tests
        run: pytest tests/ -v --cov=tool_slide_bridge
        
      - name: Build Python package
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        run: python -m build
        
      - name: Upload build artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # Create GitHub Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/
          
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          
          # Create changelog from git log
          cat > RELEASE_NOTES.md << 'EOF'
          ## Changes in $VERSION
          
          ### Features
          - Initial release of tool-slide-bridge
          - MARP integration for fast PowerPoint generation
          - Python-PPTX support for advanced presentations
          - Hybrid processing architecture
          
          ### Setup
          1. Install Node.js 16+ and Python 3.9+
          2. Install MARP CLI: `npm install -g @marp-team/marp-cli`
          3. Install Python package: `pip install tool-slide-bridge`
          
          ### Usage
          ```bash
          # Basic usage
          tool-slide-bridge input.md -o presentation.pptx
          
          # With custom theme
          tool-slide-bridge input.md -o presentation.pptx --theme corporate
          ```
          
          ### Documentation
          - [Setup Guide](https://github.com/norrisaftcc/tool-slide-bridge#setup)
          - [User Guide](https://github.com/norrisaftcc/tool-slide-bridge#usage)
          - [API Reference](https://github.com/norrisaftcc/tool-slide-bridge#api)
          EOF
          
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: Release ${{ needs.validate.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease == 'true' }}
          
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/
          asset_name: tool-slide-bridge-${{ needs.validate.outputs.version }}-python-package.zip
          asset_content_type: application/zip

  # PyPI Release
  pypi-release:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate, build, release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: pypi
    permissions:
      id-token: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package
          path: dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://upload.pypi.org/legacy/
          # Use trusted publishing, no need for username/password
          
  # Notify on completion
  notify:
    name: Notify Release Completion
    runs-on: ubuntu-latest
    needs: [validate, build, release, pypi-release]
    if: always()
    steps:
      - name: Release Status
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          echo "Release $VERSION completed!"
          echo "- GitHub Release: ${{ needs.release.result }}"
          echo "- PyPI Release: ${{ needs.pypi-release.result }}"