name: Security

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  security-events: write
  contents: read
  actions: read

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
          
      - name: Scan Python dependencies (Safety)
        run: |
          echo "Scanning Python dependencies for known vulnerabilities..."
          safety check --file requirements.txt --json --output safety-report.json || true
          safety check --file requirements-dev.txt --json --output safety-dev-report.json || true
          
      - name: Scan Python dependencies (pip-audit)
        run: |
          echo "Running pip-audit scan..."
          pip-audit --format=json --output=pip-audit-report.json --requirement=requirements.txt || true
          pip-audit --format=json --output=pip-audit-dev-report.json --requirement=requirements-dev.txt || true
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          
      - name: Scan Node.js dependencies
        run: |
          echo "Scanning Node.js dependencies..."
          npm audit --audit-level=moderate --json > npm-audit-report.json || true
          
      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: vulnerability-reports
          path: |
            *-report.json

  # Static code analysis
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: Install analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep
          
      - name: Create basic project structure
        run: |
          mkdir -p src/tool_slide_bridge
          touch src/tool_slide_bridge/__init__.py
          
      - name: Run Bandit security linting
        run: |
          echo "Running Bandit security analysis..."
          bandit -r src/ -f json -o bandit-report.json || true
          bandit -r src/ -f txt -o bandit-report.txt || true
          
      - name: Run Semgrep analysis
        run: |
          echo "Running Semgrep security analysis..."
          semgrep --config=auto --json --output=semgrep-report.json src/ || true
          
      - name: Upload static analysis reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: static-analysis-reports
          path: |
            bandit-report.*
            semgrep-report.json

  # CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality
          
      - name: Set up Python (for Python analysis)
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          
      - name: Install Python dependencies (for Python analysis)
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create basic project structure
        run: |
          mkdir -p src/tool_slide_bridge web/src
          touch src/tool_slide_bridge/__init__.py
          echo "console.log('Hello World');" > web/src/index.js
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # Container security (if we add Docker later)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: false  # Disabled until we add Docker support
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: docker build -t tool-slide-bridge:latest .
        
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tool-slide-bridge:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Security policy compliance check
  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for required security files
        run: |
          echo "Checking for required security files..."
          
          # Check for SECURITY.md
          if [ ! -f "SECURITY.md" ]; then
            echo "⚠️  SECURITY.md not found - should be created for vulnerability reporting"
          else
            echo "✅ SECURITY.md found"
          fi
          
          # Check for proper .gitignore patterns
          if grep -q "\.env" .gitignore && grep -q "\.key" .gitignore; then
            echo "✅ .gitignore contains security patterns"
          else
            echo "⚠️  .gitignore missing security patterns"
          fi
          
          # Check for secrets in code (basic check)
          echo "Checking for potential secrets..."
          if git log --all --full-history -- | grep -iE "(password|api[_-]?key|secret|token)" | head -5; then
            echo "⚠️  Potential secrets found in git history"
          else
            echo "✅ No obvious secrets found in git history"
          fi
          
      - name: Validate GitHub security settings
        run: |
          echo "Security compliance checklist:"
          echo "- [ ] Branch protection enabled on main branch"
          echo "- [ ] Require PR reviews before merging"
          echo "- [ ] Require status checks to pass"
          echo "- [ ] Require signed commits (recommended)"
          echo "- [ ] Dependabot alerts enabled"
          echo "- [ ] Secret scanning enabled"
          echo "- [ ] CodeQL analysis enabled"

  # Generate security report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, static-analysis, codeql, compliance-check]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all security reports
        uses: actions/download-artifact@v3
        
      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "**Scan Date:** $(date)" >> security-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary.md
          echo "**Branch:** ${{ github.ref_name }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results" >> security-summary.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- Static Analysis: ${{ needs.static-analysis.result }}" >> security-summary.md
          echo "- CodeQL Analysis: ${{ needs.codeql.result }}" >> security-summary.md
          echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Recommendations" >> security-summary.md
          echo "1. Review all vulnerability reports in artifacts" >> security-summary.md
          echo "2. Update dependencies with known vulnerabilities" >> security-summary.md
          echo "3. Address any static analysis findings" >> security-summary.md
          echo "4. Implement missing security controls" >> security-summary.md
          
      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md